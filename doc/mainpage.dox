/** 
* @mainpage gpuNUFFT 
*
* gpuNUFFT - GPU Regridding of Radial 3-D MRI data
*
* - Andreas Schwarzl - andreas.schwarzl@student.tugraz.at
* - Florian Knoll - florian.knoll@nyumc.org
*
* @section INFO
*
*  GPU 3D regridding library.
*
* @section REQUIREMENTS
*
* - CUDA
* - CMAKE 2.8
* - Google test framework (optional)
*
*  CMAKE Options:
*  
*  - GEN_ATOMIC        : DEFAULT ON, enables fast library using atomic operations
*  - WITH_DEBUG        : DEFAULT OFF, enables Command-Line DEBUG output
*  - GEN_TESTS         : DEFAULT OFF, generate Unit tests
*    
*  @section LINUX 
*
*  build project via cmake, starting from project root directory:
*  \code
*    > mkdir build
*    > cd build
*    > cmake ..
*    > make
*  \endcode
*
* @section Demo 
*
* 
* Simple cpp examples (Google Test Unit tests) can be found in the <b>test</b> directory.  
*
* In a nutshell, one simple example from the unit tests: 
* 
* \code
  TEST(TestForwardBackward,Test64)
  {
    int kernel_width = 3;
    float osf = 1.25;//oversampling ratio
    int sector_width = 8;
    
    //Data
    int data_entries = 2;
    DType2* data = (DType2*) calloc(data_entries,sizeof(DType2)); //2* re + im
    data[0].x = 5;//Re
    data[0].y = 0;//Im
    data[1].x = 1;//Re
    data[1].y = 0;//Im

    //Coords
    //Scaled between -0.5 and 0.5
    //in triplets (x,y,z) as structure of array
    //p0 = (0,0,0)
    //p1 0 (0.25,0.25,0.25)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
    coords[0] = 0.00; //x0
    coords[1] = 0.25; //x1
    
    coords[2] = 0.00; //y0
    coords[3] = 0.25; //y0
    
    coords[4] = 0.00; //z0
    coords[5] = 0.25; //z1

    //Input data array, complex values
    gpuNUFFT::Array<DType2> dataArray;
    dataArray.data = data;
    dataArray.dim.length = data_entries;
    
    //Input array containing trajectory in k-space
    gpuNUFFT::Array<DType> kSpaceData;
    kSpaceData.data = coords;
    kSpaceData.dim.length = data_entries;

    gpuNUFFT::Dimensions imgDims;
    imgDims.width = 64;
    imgDims.height = 64;
    imgDims.depth = 64;

    //precomputation performed by factory
    gpuNUFFT::GpuNUFFTOperatorFactory factory; 
    gpuNUFFT::GpuNUFFTOperator *gpuNUFFTOp = factory.createGpuNUFFTOperator(kSpaceData,kernel_width,sector_width,osf,imgDims);

    //Output Array
    gpuNUFFT::Array<CufftType> imgArray;
    
    //Perform FT^H Operation
    imgArray = gpuNUFFTOp->performGpuNUFFTAdj(dataArray);
    
    //Output Image
    CufftType* gdata = imgArray.data;
    
    //Perform FT Operation
    gpuNUFFT::Array<CufftType> kSpace = gpuNUFFTOp->performForwardGpuNUFFT(imgArray);
    
    printf("contrast %f \n",kSpace.data[0].x/kSpace.data[1].x);

    free(data);
    free(coords);
    free(gdata);

    delete gpuNUFFTOp;
  }
  \endcode
*/
